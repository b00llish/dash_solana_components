{
  "src/ts/components/SolanaWalletMultiButton.tsx": {
    "displayName": "SolanaWalletMultiButton",
    "description": "SolanaWalletMultiButton component.\nThis is a multi-button component for Solana wallets. It allows users to connect\nto different types of Solana wallets.ne the SolanaWalletMultiButton compone is a functional component that takes some props and returns a JSX eleme",
    "props": {
      "network": {
        "description": "The network for the wallet.\n\nThis prop specifies the network for the wallet. It can be 'devnet', 'mainnet', or 'testnet'.",
        "required": false,
        "defaultValue": {
          "value": "'mainnet'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'devnet'",
              "computed": false
            },
            {
              "value": "'mainnet'",
              "computed": false
            },
            {
              "value": "'testnet'",
              "computed": false
            }
          ],
          "raw": "\"devnet\" | \"mainnet\" | \"testnet\""
        }
      },
      "publicKeyState": {
        "description": "The state of the public key.\n\nThis prop holds the state of the public key. It could be a string representing\nthe public key, or null if there is no public key.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "rpcEndpoint": {
        "description": "The custom RPC endpoint for the wallet.\n\nThis prop specifies a custom RPC endpoint for the wallet. If it's not provided,\nthe default endpoint for the specified network will be used.",
        "required": false,
        "defaultValue": {
          "value": "null",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "A function to update the component's properties.\n\nDash provides this function and passes it as a prop to the component. This function\nshould be called with an object that contains the new values of the properties that\nyou want to change. This is typically used inside a Dash callback to update the component's properties.\n\nFor example, in our component, we call `setProps` with the new state of the `publicKeyState`\nwhenever the wallet is connected or disconnected. This updates the `publicKeyState` property\nof the component and triggers a Dash callback that listens to this property.\n\n\nUpdate props to trigger callbacks.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "((props: { publicKeyState?: string; rpcEndpoint?: string; }) => void) & ((props: Record<string, any>) => void)"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "className": {
        "description": "Adds CSS class name(s).",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/WalletContextProvider.tsx": {
    "displayName": "WalletContextProvider",
    "description": "",
    "props": {
      "network": {
        "description": "",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'mainnet-beta'",
              "computed": false
            },
            {
              "value": "'testnet'",
              "computed": false
            },
            {
              "value": "'devnet'",
              "computed": false
            }
          ],
          "raw": "WalletAdapterNetwork"
        }
      },
      "rpcEndpoint": {
        "description": "",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "((props: {}) => void) & ((props: Record<string, any>) => void)"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "className": {
        "description": "Adds CSS class name(s).",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      }
    },
    "isContext": false
  }
}